import UIKit

print("--------------------------------------------- 1")

// 1. Homework

func isPolindrome(variable: String){
  if variable.contains(variable.reversed()) {
    print("This is a polindrome")
  } else {
    print("This is not a polindrome")
  }
}

isPolindrome(variable: "level")
isPolindrome(variable: "car")

// 1. Homework -- FINISHED

//-----------------------//
print("--------------------------------------------- 2")

// 2. Homework

func variableCount(variables: [Int]){
  var dictionary: [Int:Int] = [:]
  var count: Int = 1
  for (index, variable) in variables.enumerated() {
    if index < variables.endIndex-1{
      if variables[index] == variables[index+1]{
        count += 1
        dictionary[variable] = count
      } else {
        dictionary[variable] = count
        count = 1
      }
    }
  }
  print(dictionary)
}

variableCount(variables: [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6])

// 2. Homework NOT FINISHED YET

//-----------------------//

print("--------------------------------------------- 3")

// 3. Homework

func pyramid(count: Int){
  var result: String = ""
  for _ in 1...count {
    result += "*"
    print(result)
  }
}

pyramid(count: 4)

// 3. Homework FINISHED

//-----------------------//

print("--------------------------------------------- 4")

// 4. Homework

func pyramidCentered(count: Int){
  for i in 1...count
  {
      for _ in stride(from: count, to: i, by: -1)
      {
          print(terminator : " ")
      }

      for _ in 1...i
      {
          print("*",terminator : " ")
      }

      print(" ")
  }
}

pyramidCentered(count: 10)

// 4. Homework FINISHED

print("--------------------------------------------- 5-1")

// 5. Homework -- 1
/* If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000. */

func findMultiplies(number: Int){
  var result: Int = 0

  for n in 2..<number {
    if n % 3 == 0 || n % 5 == 0 {
      result += n
    }
  }
  print(result)
}

findMultiplies(number: 1000)

// 5. Homework -- 1 FINISHED

print("--------------------------------------------- 5-2 NN")

// 5. Homework -- 2
/* Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

 By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

func fibonacci(){
  var start = 1
  var newArray: [Int] = []
  var beforeNumber = 0

  newArray.append(start)
  beforeNumber = start + start
  newArray.append(beforeNumber)
  print(newArray)
  beforeNumber = newArray.last!


}
fibonacci()

// 5. Homework -- 2 NOT FINISHED YET

print("--------------------------------------------- 5-3 NN")

// 5. Homework -- 3

/* The prime factors of 13195 are 5, 7, 13 and 29.

 What is the largest prime factor of the number 600851475143 ?

 */
